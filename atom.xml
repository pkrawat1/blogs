<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Just Curiosity]]></title>
    <link href="http://pkrawat1.github.io/atom.xml" rel="self"/>
    <link href="http://pkrawat1.github.io/"/>
    <updated>2016-11-22T11:13:28+05:30</updated>
    <id>http://pkrawat1.github.io/</id>
    <author>
        <name><![CDATA[Pankaj Kumar Rawat]]></name>
        <email><![CDATA[pankajrawat19sept@gmail.com]]></email>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Rails Caching and Active Record Extensions]]></title>
        <link href="http://pkrawat1.github.io/blog/2016/06/18/rails-caching-and-active-record-extensions/"/>
        <updated>2016-06-18T21:34:14+05:30</updated>
        <id>http://pkrawat1.github.io/blog/2016/06/18/rails-caching-and-active-record-extensions</id>
        <content type="html"><![CDATA[<p>As a rails developer, I have gone through situations when we really want to get the most out of the limited resources.
So we opt for digging out the areas where we can improve. And caching is one of the option everybody thinks about, and implement.</p>

<h4>Situation</h4>

<p>Lately I have been looking at the solution to cache the Active Record Objects directly. Also if it could cache the methods frequently used methods too.
So I learn&rsquo;t that <code>Rails.cache</code> could actually store the Active records directly, that can be configured with redis easily.</p>

<h6>The Problem</h6>

<p>The code was too repetitive. Every Where I see was a similar pattern
like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Write</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Read</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Clear</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">del</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was becoming a real issue. So I thought if we can have class method where we could just pass in the method names, and create the cache, that could be shared with all models. So first solution I thought of was creating a Concern that would be included in all models. So came up with this soution.</p>

<h4>The Solution</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CachedMethods</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cached_methods</span><span class="p">(</span><span class="o">*</span><span class="nb">methods</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">association</span><span class="o">|</span>
</span><span class='line'>        <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;cached_</span><span class="si">#{</span><span class="n">association</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">cached</span> <span class="o">=</span> <span class="kp">nil</span><span class="o">|</span>
</span><span class='line'>          <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">association</span><span class="si">}</span><span class="s2">_for_</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="n">cached</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">false</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">cached</span> <span class="k">if</span> <span class="n">cached</span>
</span><span class='line'>          <span class="n">load_assoc</span> <span class="o">=</span> <span class="nb">send</span><span class="p">(</span><span class="n">association</span><span class="p">)</span>
</span><span class='line'>          <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">load_assoc</span><span class="p">,</span> <span class="ss">expires_in</span><span class="p">:</span> <span class="mi">30</span><span class="o">.</span><span class="n">minutes</span><span class="p">)</span>
</span><span class='line'>          <span class="n">update_cache_keys</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>          <span class="n">load_assoc</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">association</span><span class="si">}</span><span class="s2">_is_cached?&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">association</span><span class="si">}</span><span class="s2">_for_</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># keeps tracks of all cache keys, for the included class.</span>
</span><span class='line'>  <span class="n">define_method</span><span class="p">(</span><span class="s1">&#39;update_cache_keys&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class='line'>    <span class="n">multi_key</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">_cache_keys&quot;</span>
</span><span class='line'>    <span class="n">keys</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">multi_key</span><span class="p">)</span> <span class="o">||</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">keys</span> <span class="o">&lt;&lt;</span> <span class="n">key</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">multi_key</span><span class="p">,</span> <span class="n">keys</span><span class="o">.</span><span class="n">uniq</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># can be called to clear all cached data for included class</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_cache</span>
</span><span class='line'>    <span class="n">cached</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">_cache_keys&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="n">cached</span>
</span><span class='line'>    <span class="n">cached</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="no">Rails</span><span class="o">.</span><span class="n">cache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I did not want this to manually including every where in the application. I don&rsquo;t want to remember which concern to use. So thought of creating an extension for the Active record.</p>

<h4>Improvement</h4>

<p>So created an ActiveRecordExtension.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Inculde custom enxtensions here</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveRecordExtension</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">CachedMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># include the extension</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="no">ActiveRecordExtension</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Create an initializer called extensions, that will load it during application initialization.</p>

<p><code>require "active_record_extension"</code></p></blockquote>

<h4>How to Use</h4>

<p>Now anybody can use this extension in the system easily.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ========================================</span>
</span><span class='line'><span class="c1">#                  USAGE</span>
</span><span class='line'><span class="c1"># ========================================</span>
</span><span class='line'><span class="c1"># // Ruby.</span>
</span><span class='line'><span class="no">Class</span> <span class="no">Fruit</span>
</span><span class='line'><span class="c1">#   ...</span>
</span><span class='line'><span class="c1">#   # this code generates some instance methods</span>
</span><span class='line'><span class="c1">#   # cached_apples and cached_mangoes</span>
</span><span class='line'><span class="c1">#   # which when called the first time, will cache the ActiveRecord Object,</span>
</span><span class='line'><span class="c1">#   # and after every call will get the object back from the cache only.</span>
</span><span class='line'><span class="c1">#   # You can also cache the method results too.</span>
</span><span class='line'><span class="c1">#   # Also it creates cache check instance methods</span>
</span><span class='line'><span class="c1">#   # as in this case apples_is_cached? And mangos_is_cached?</span>
</span><span class='line'><span class="n">cached_methods</span> <span class="ss">:apples</span><span class="p">,</span> <span class="ss">:mangos</span>
</span><span class='line'><span class="c1">#   # As the name suggests, this method will clear all the cache related</span>
</span><span class='line'><span class="c1">#   # to the class.</span>
</span><span class='line'><span class="n">after_save</span> <span class="ss">:delete_cache</span>
</span><span class='line'><span class="c1">#   ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Now that looks easier to use.</p></blockquote>

<h4>What is provides</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fruit</span> <span class="o">=</span> <span class="no">Fruit</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">apples</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">.</span><span class="n">cached_apples</span> <span class="c1"># cache apples</span>
</span><span class='line'><span class="n">mangos</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">.</span><span class="n">cached_mangoes</span> <span class="c1"># cache mangoes</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Now if you this code is run again</span>
</span><span class='line'><span class="n">apples</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">.</span><span class="n">cached_apples</span> <span class="c1"># from cache</span>
</span><span class='line'><span class="n">mangoes</span> <span class="o">=</span> <span class="n">fruit</span><span class="o">.</span><span class="n">cached_mangoes</span> <span class="c1"># from cache</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># the cache will auto expire after 30 minutes</span>
</span><span class='line'><span class="c1"># or if the Fruit object is updated.</span>
</span><span class='line'><span class="c1"># we have added delete_cache callback</span>
</span><span class='line'><span class="n">after_save</span> <span class="ss">:delete_cache</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>How cool is that.</p></blockquote>

<h5>Try it yourself Now.</h5>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[TodoApp in Angular2 with TypeScript]]></title>
        <link href="http://pkrawat1.github.io/blog/2015/08/25/todoapp-in-angular2-with-typescript/"/>
        <updated>2015-08-25T15:35:36+05:30</updated>
        <id>http://pkrawat1.github.io/blog/2015/08/25/todoapp-in-angular2-with-typescript</id>
        <content type="html"><![CDATA[<blockquote><p><strong>Warning</strong>: Angular is continuosly changing at this point.
<strong>Visit</strong>: <a href="https://goo.gl/BPGMVO">Ecommerce App</a> for latest code in Angular2 Beta.</p></blockquote>

<p>In this post I&rsquo;ll be sharing my experience during the application setup.
I&rsquo;ll be creating an application from scratch, right from creating application folder.</p>

<h1>Let&rsquo;s get started</h1>

<h3>First thing first, create an application folder</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>mkdir todoapp
</span><span class='line'>  <span class="nv">$ </span><span class="nb">cd </span>todoapp
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to download typescript definition manager(tsd), just like npm(node package manager).
You can install tsd with this simple command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>npm install -g tsd  <span class="c">#use sudo if required</span>
</span><span class='line'>  <span class="nv">$ </span>tsd --version <span class="c"># Validate installation by typing tsd in the console.</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can checkout some commands and how to use them in this <a href="https://www.npmjs.com/package/tsd">npm repo</a>.</p>

<h3>Initializing the application</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>tsd init
</span></code></pre></td></tr></table></div></figure>


<p>This generated the tsd.json file. Just like in case of npm package.json is created.
Anyone who has the access to this repository can do a $ tsd reinstall , like npm install we all are so used to.</p>

<h3>Let&rsquo;s install typescript libraries</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>tsd query angular2
</span><span class='line'>    - angular2 / angular2
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s fetch angular2 from the definitely typed repo.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>tsd query angular2 --action install --save
</span></code></pre></td></tr></table></div></figure>


<p>Doing this will create a directory called angular2 in the typings directory with a file called
angular2.d.ts
This will also update the tsd.json with current angular2 head sha.</p>

<figure class='code'><figcaption><span>tsd.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;v4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;repo&quot;</span><span class="o">:</span> <span class="s2">&quot;borisyankov/DefinitelyTyped&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;ref&quot;</span><span class="o">:</span> <span class="s2">&quot;master&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;path&quot;</span><span class="o">:</span> <span class="s2">&quot;typings&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;bundle&quot;</span><span class="o">:</span> <span class="s2">&quot;typings/tsd.d.ts&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;installed&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;angular2/angular2.d.ts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;commit&quot;</span><span class="o">:</span> <span class="s2">&quot;38fb591c6eba840e0b53d1110302b8e4fb04651c&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>NOTE</strong>: Typing for angular2 are not complete at the moment they plan to complete it before the beta lauch but we should be good to start playing around with the current basic type definitions.</p></blockquote>

<h2>Let&rsquo;s install TypeScript compiler</h2>

<p>For the Typescript to compile we need a tsconfig.json file in the root of the project.</p>

<p>There are two basic components of a tsconfig.json file.</p>

<ol>
<li>compilerOptions</li>
<li>files</li>
</ol>


<p>Sample tsconfig.json from <a href="https://github.com/Microsoft/TypeScript/wiki/tsconfig.json">TypeScript Wiki</a></p>

<figure class='code'><figcaption><span>tsconfig.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;compilerOptions&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;module&quot;</span><span class="o">:</span> <span class="s2">&quot;commonjs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;noImplicitAny&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;core.ts&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;sys.ts&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of options can be passed to <a href="https://github.com/Microsoft/TypeScript/wiki/Compiler-Options">compilerOptions</a>. You can find that out from the wiki. It also uses default compiler options if none is given and also all the files will be included by default.</p>

<p>So let’s go ahead and add our own tsconfig.json file.</p>

<figure class='code'><figcaption><span>tsconfig.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.5.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;compilerOptions&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;target&quot;</span><span class="o">:</span> <span class="s2">&quot;es5&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;module&quot;</span><span class="o">:</span> <span class="s2">&quot;commonjs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;declaration&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;noImplicitAny&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;removeComments&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;noLib&quot;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;emitDecoratorMetadata&quot;</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;filesGlob&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;./**/*.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;!./node_modules/**/*.ts&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;files&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;./app.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;./typings/angular2/angular2.d.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;./typings/es6-promise/es6-promise.d.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;./typings/rx/rx-lite.d.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;./typings/rx/rx.d.ts&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;./typings/tsd.d.ts&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now install the typescript that will be compiling or converting typescript code to
Javascript code to make the browsers understand the code. As of now browsers don&rsquo;t
have native support for typescript nor ES6 completely.</p>

<p>Once installed we can use tsc for transpiling ts to js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="nv">$ </span>npm install -g typescript
</span><span class='line'>  <span class="nv">$ </span>tsc -w <span class="c">#realtime transpile ts to js.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Application</h3>

<p>First we will be creating a file called app.js, that was included in tsconfig.json.</p>

<figure class='code'><figcaption><span>app.ts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">/// &lt;reference path=&quot;typings/angular2/angular2.d.ts&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">View</span><span class="p">,</span> <span class="nx">bootstrap</span><span class="p">,</span> <span class="nx">NgFor</span><span class="p">,</span> <span class="nx">NgIf</span><span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;angular2/angular2&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">selector</span><span class="o">:</span> <span class="s1">&#39;todo-app&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="nx">View</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="err">`</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">li</span> <span class="o">*</span><span class="nx">ng</span><span class="o">-</span><span class="k">for</span><span class="o">=</span><span class="s2">&quot;#todo of todos&quot;</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="p"></span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">input</span> <span class="err">#</span><span class="nx">todotext</span> <span class="p">(</span><span class="nx">keyup</span><span class="p">)</span><span class="o">=</span><span class="s2">&quot;doneTyping($event)&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="p">(</span><span class="nx">click</span><span class="p">)</span><span class="o">=</span><span class="s2">&quot;addTodo(todotext.value, $event)&quot;</span><span class="o">&gt;</span><span class="nx">Add</span> <span class="nx">Todo</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>    <span class="err">`</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">directives</span><span class="o">:</span> <span class="p">[</span><span class="nx">NgFor</span><span class="p">,</span> <span class="nx">NgIf</span><span class="p">]</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">class</span> <span class="nx">TodoApp</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">todos</span><span class="o">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Eat Breakfast&quot;</span><span class="p">,</span> <span class="s2">&quot;Walk Dog&quot;</span><span class="p">,</span> <span class="s2">&quot;Breathe&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">addTodo</span><span class="p">(</span><span class="nx">todo</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">doneTyping</span><span class="p">(</span><span class="nx">$event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$event</span><span class="p">.</span><span class="nx">which</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">$event</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="nx">$event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">bootstrap</span><span class="p">(</span><span class="nx">TodoApp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>For details on the code please visit these <a href="https://angular.io/docs/js/latest/guide/">step by step guides</a>.</p></blockquote>

<p>Also install angular2, traceur, systemjs by adding it inside package.json.
Or by <code>npm install angular2 traceur systemjs</code>, whichever suits you.</p>

<ol>
<li>Angular2 so that our transpiled Js can be used on the frontend</li>
<li>Traceur is es6 to es5 transpiler browsers don’t support es6 as of yet but not for long.</li>
<li>SystemJs is univerval dynamic module loader.</li>
</ol>


<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;todoapp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Todo App in Angularjs 2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;app.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;repository&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;git+https://github.com/pkrawat1/todoapp.git&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;Pankaj Kumar Rawat&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;license&quot;</span><span class="o">:</span> <span class="s2">&quot;ISC&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;bugs&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;https://github.com/pkrawat1/todoapp/issues&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;homepage&quot;</span><span class="o">:</span> <span class="s2">&quot;https://github.com/pkrawat1/todoapp#readme&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;keywords&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;angular2&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;typescript&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;tds&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;angular2&quot;</span><span class="o">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;systemjs&quot;</span><span class="o">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;traceur&quot;</span><span class="o">:</span> <span class="s2">&quot;latest&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to use these components we need to create an index.html file.
The code is self explanatory here if not head over to <a href="https://angular.io/docs/js/latest/guide/">angular.io</a> they have very good explanations up on their websites.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'>  <span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>Angular 2 Todo App<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      &lt;script src=&quot;https://github.jspm.io/jmcriffey/bower-traceur-runtime@0.0.87/traceur-runtime.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">      &lt;script src=&quot;https://jspm.io/system@0.16.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">      &lt;script src=&quot;https://code.angularjs.org/2.0.0-alpha.28/angular2.dev.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">      --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;node_modules/traceur/bin/traceur-runtime.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;node_modules/systemjs/dist/system.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;node_modules/angular2/bundles/angular2.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;script&gt;</span>
</span><span class='line'>        <span class="nx">System</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;app.js&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;todo-app&gt;&lt;/todo-app&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>For starting a local server</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  npm install http-server
</span><span class='line'>  http-server -c-1 <span class="c"># to disable cache</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Hurrrrayyy!!!</h1>

<p>If everything goes right you should see the list of tasks with an input box in the browser when you go to <a href="http://localhost:8080">http://localhost:8080</a>.</p>

<p>The repository of this whole code is hosted on <a href="https://github.com/pkrawat1/todoapp.git">github</a> in v2 branch.</p>

<p>Reach out to me on my email, twitter or comment below if you are stuck anywhere and I’d be more than happy to help you.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Javascript Back to Basics part 1]]></title>
        <link href="http://pkrawat1.github.io/blog/2014/12/06/javascript-back-to-basics-part-1/"/>
        <updated>2014-12-06T17:47:23+05:30</updated>
        <id>http://pkrawat1.github.io/blog/2014/12/06/javascript-back-to-basics-part-1</id>
        <content type="html"><![CDATA[<h1>Overview</h1>

<p>JavaScript is an object oriented dynamic language, it has types and operators, core objects, and methods.</p>

<p>One of the key differences is that JavaScript does not have classes, instead, the class functionality is accomplished by object prototypes.</p>

<p>The other main difference is that functions are objects, giving functions the capacity to hold executable code and be passed around like any other object.</p>

<h1>What is an Object?</h1>

<p>An object is a dynamic collection of properties. Every Property has a unique key string within the object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Fundamental operations</span>
</span><span class='line'><span class="nx">get</span>
</span><span class='line'>    <span class="nx">object</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>    <span class="nx">object</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nx">set</span>
</span><span class='line'>    <span class="nx">object</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">object</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="k">delete</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">object</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">object</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Property</h1>

<p>A property is named collection of attributes.</p>

<p><strong>Types</strong></p>

<ol>
<li><strong>Data Properties</strong></li>
<li><strong>Accessor Properties</strong></li>
</ol>


<h3>Different Properties</h3>

<ul>
<li>value: anything</li>
<li>writable: boolean ;  For true, the property value can be modified.</li>
<li>enumerable: boolean ; For true, property can be enumerated by a for…in statement.</li>
<li>congigurable: bollean ; For true, property attributes can be changed, and the property can be deleted.</li>
<li>get: function(){&hellip;return value}</li>
<li>set: funtion(value){&hellip;}</li>
</ul>


<h3>Data Properties</h3>

<p>A data property is a property that can get and set a value. Data properties contain the value and writable properties in their descriptors.</p>

<p>Data Descriptor attributes are:
<strong>value, writable, enumerable, configurable</strong></p>

<h3>Data Properties Added Without Using defineProperty</h3>

<p>If you add a data property without using the <strong>Object.defineProperty</strong>, <strong>Object.defineProperties</strong>, or<strong> Object.create functions</strong>, the writable, enumerable, and configurable attributes are all set to true. After the property is added, you can modify it by using the <strong>Object.defineProperty</strong> function.</p>

<p>You can use the following ways to add a data property:</p>

<ul>
<li>An assignment operator (=), as in obj.color = &ldquo;white&rdquo;;</li>
<li>An object literal, as in obj = { color: &ldquo;white&rdquo;, height: 5 };</li>
<li>A construction function</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Circle</span> <span class="p">(</span><span class="nx">xPoint</span><span class="p">,</span> <span class="nx">yPoint</span><span class="p">,</span> <span class="nx">radius</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">xPoint</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">yPoint</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">r</span> <span class="o">=</span> <span class="nx">radius</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Invoking constructor</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aCircle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">99</span><span class="p">);</span>
</span><span class='line'><span class="c1">//The type of all objects created with a custom constructor is object.</span>
</span><span class='line'><span class="c1">//There are only six types in JavaScript:</span>
</span><span class='line'><span class="c1">//object, function, string, number, boolean, and undefined</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Creating Object</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// writable, enumerable, congigurable is set true</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="p">{</span><span class="nx">foo</span><span class="o">:</span> <span class="nx">bar</span><span class="p">};</span>
</span><span class='line'><span class="c1">//Also written as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">value</span><span class="o">:</span> <span class="nx">bar</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">congigurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">//Here</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="nx">gives</span> <span class="nx">an</span> <span class="nb">Object</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Accessor Properties</h3>

<p>An accessor property calls a user-provided function every time that the property value is set or retrieved. The descriptor for an accessor property contains a get attribute, a set attribute, or both.
<strong>Accessor descriptor attributes</strong>
* <strong>get</strong>, A function that returns the property value. The function has no parameters.
* <strong>set</strong>, A function that sets the property value. It has one parameter that contains the value to be assigned.
* <strong>enumerable</strong>
* <strong>configurable</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">height_to_weight</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">*</span> <span class="mf">2.7</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">value</span> <span class="o">/</span> <span class="mf">2.7</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">height_to_weight</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span> <span class="mi">175</span> <span class="c1">// {height: 175, weight: 65}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Tussle of the State Machines]]></title>
        <link href="http://pkrawat1.github.io/blog/2014/11/15/tussle-of-the-state-machines/"/>
        <updated>2014-11-15T14:30:44+05:30</updated>
        <id>http://pkrawat1.github.io/blog/2014/11/15/tussle-of-the-state-machines</id>
        <content type="html"><![CDATA[<p>There&rsquo;s no shortage of Ruby state machine libraries, but when we needed to implement a formal state machine we don&rsquo;t find one which met all of our requirements.</p>

<p>I had a same problem in my project.What i needed was a polymorphic class that could have multiple number of state machines in it.
Depending on the the relation the appropriate state machine should be used.</p>

<h3>What i Wanted</h3>

<figure class='code'><figcaption><span>call.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Call</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:scheduled_at</span><span class="p">,</span>          <span class="ss">type</span><span class="p">:</span> <span class="no">DateTime</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:is_existing_customer</span><span class="p">,</span>  <span class="ss">type</span><span class="p">:</span> <span class="no">Boolean</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:note</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:callable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">callable_type</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Car&#39;</span>
</span><span class='line'>      <span class="n">state_machine</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="ss">:fresh</span><span class="p">,</span> <span class="ss">namespace</span><span class="p">:</span> <span class="s1">&#39;car&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">event</span> <span class="ss">:schedule</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">transition</span> <span class="o">[</span><span class="ss">:fresh</span><span class="p">,</span> <span class="ss">:schedule</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:scheduled</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Personal&#39;</span>
</span><span class='line'>       <span class="n">state_machine</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="ss">:fresh</span><span class="p">,</span> <span class="ss">namespace</span><span class="p">:</span> <span class="s1">&#39;Personal&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">event</span> <span class="ss">:schedule</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">transition</span> <span class="ss">:fresh</span> <span class="o">=&gt;</span> <span class="ss">:scheduled</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>     <span class="k">when</span> <span class="s1">&#39;any other&#39;</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>The Main Problem</h1>

<p>Since AASM State Machine does not supports multiple state machine in a single class. So i tried to achive it through state_machine gem with namespaces
BUT AGAIN we can not have same states under namespaced state machine in a single class.</p>

<h1>How to do it?</h1>

<p>My basic requirement was to have a state machine that should be easily composable with other Ruby objects.So what i need to do was to define a state machine as a separate class and selectively apply itto our Rails models.
since Mongodb supports embeded obects. I could use it to store states in it.</p>

<h2>The Solution</h2>

<p>We wanted a state machine that could be easily integrated with other Ruby objects. So we decided to define a state machine as a separate class and selectively apply it to our Rails models. We were using MongoDB, so we embedded these objects.</p>

<figure class='code'><figcaption><span>car_state_machine.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CarStateMachine</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:state</span>
</span><span class='line'>  <span class="n">embedded_in</span> <span class="ss">:call</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># no need for name space and we can use AASM directly</span>
</span><span class='line'>  <span class="n">state_machine</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="ss">:fresh</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">#states: fresh, scheduled, lead, succeed</span>
</span><span class='line'>    <span class="n">event</span> <span class="ss">:schedule</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">transition</span> <span class="o">[</span><span class="ss">:fresh</span><span class="p">,</span> <span class="ss">:schedule</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="ss">:scheduled</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>personal_state_machine.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PersonalStateMachine</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AASM</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:state</span>
</span><span class='line'>  <span class="n">embedded_in</span> <span class="ss">:call</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#states: hello, meet, bye</span>
</span><span class='line'>  <span class="n">state_machine</span> <span class="ss">:state</span><span class="p">,</span> <span class="ss">:initial</span> <span class="o">=&gt;</span> <span class="ss">:hello</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">event</span> <span class="ss">:wow</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">transition</span> <span class="ss">:hello</span> <span class="o">=&gt;</span> <span class="ss">:meet</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>My Call class now</h3>

<p>So to call access these embedded objects i defined a method call_state that returns the embedded on the basis of the callable_type of Call Class.</p>

<figure class='code'><figcaption><span>call.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Call</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:scheduled_at</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">DateTime</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:is_existing_customer</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Boolean</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:note</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:callable_type</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">embeds_one</span> <span class="ss">:car_state_machine</span>
</span><span class='line'>  <span class="n">embeds_one</span> <span class="ss">:personal_state_machine</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Method to access state machine</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call_state</span>
</span><span class='line'>    <span class="k">case</span> <span class="nb">self</span><span class="o">.</span><span class="n">callable_type</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Car&#39;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">car_state_machine</span> <span class="o">||</span> <span class="nb">self</span><span class="o">.</span><span class="n">build_car_state_machine</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Personal&#39;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">personal_state_machine</span> <span class="o">||</span> <span class="nb">self</span><span class="o">.</span><span class="n">build_personal_state_machine</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Example</span>
</span><span class='line'><span class="n">call</span> <span class="o">=</span> <span class="no">Call</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">callable_type</span> <span class="c1"># =&gt; &quot;Car&quot;</span>
</span><span class='line'><span class="n">call</span><span class="o">.</span><span class="n">call_state</span><span class="o">.</span><span class="n">state</span> <span class="c1"># =&gt; &#39;fresh&#39;</span>
</span><span class='line'><span class="n">call</span><span class="o">.</span><span class="n">call_state</span><span class="o">.</span><span class="n">schedule!</span>
</span><span class='line'><span class="n">call</span><span class="o">.</span><span class="n">call_state</span><span class="o">.</span><span class="n">state</span> <span class="c1"># =&gt; &#39;scheduled&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#####</span>
</span><span class='line'>
</span><span class='line'><span class="n">call</span> <span class="o">=</span> <span class="no">Call</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">callable_type</span> <span class="c1"># =&gt; &quot;Personal&quot;</span>
</span><span class='line'><span class="n">call</span><span class="o">.</span><span class="n">call_state</span><span class="o">.</span><span class="n">state</span> <span class="c1"># =&gt; &#39;hello&#39;</span>
</span><span class='line'><span class="n">call</span><span class="o">.</span><span class="n">call_state</span><span class="o">.</span><span class="n">wow!</span>
</span><span class='line'><span class="n">call</span><span class="o">.</span><span class="n">call_state</span><span class="o">.</span><span class="n">state</span> <span class="c1"># =&gt; &#39;meet&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
    </entry>
    
</feed>
